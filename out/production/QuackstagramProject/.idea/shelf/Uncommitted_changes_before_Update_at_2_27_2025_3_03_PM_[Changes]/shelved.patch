Index: data/credentials.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Lorin:Piuuoapx:For copyright reasons, I am not Grogu\r\nXylo:Password:Fierce warrior, not solo\r\nZara:Password:Humanoid robot much like the rest\r\nMystar:Password:Xylo and I are not the same!\r\nfreeze:cgw6f: ig bot\r\nLouisBoch:AZZERT_869cgw:Trial and error\r\nLouis:pslli:Bio\r\nabdul:inxel1:zzzzz\r\ntest1:zcuz1:nooo\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/credentials.txt b/data/credentials.txt
--- a/data/credentials.txt	(revision c08b8fa8cb8a96e0659c6903d223425260884f2d)
+++ b/data/credentials.txt	(date 1740664832706)
@@ -7,3 +7,4 @@
 Louis:pslli:Bio
 abdul:inxel1:zzzzz
 test1:zcuz1:nooo
+A:Piuuoapx:Bio
Index: Refactor_UI/QuakstagramHomeUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Refactor_UI;\r\n\r\nimport javax.imageio.ImageIO;\r\nimport javax.swing.*;\r\nimport java.awt.event.MouseAdapter;\r\nimport java.awt.event.MouseEvent;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.BufferedReader;\r\nimport java.io.BufferedWriter;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Path;\r\nimport java.nio.file.Paths;\r\nimport java.nio.file.StandardOpenOption;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport New_Refactor_Sign_In.*;\r\n\r\npublic class QuakstagramHomeUI extends BaseUI {\r\n    private static final int WIDTH = 300;\r\n    private static final int HEIGHT = 500;\r\n    // private static final int NAV_ICON_SIZE = 20; // Corrected static size for\r\n    // bottom icons\r\n    private static final int IMAGE_WIDTH = WIDTH - 100; // Width for the image posts\r\n    private static final int IMAGE_HEIGHT = 150; // Height for the image posts\r\n    private static final Color LIKE_BUTTON_COLOR = new Color(255, 90, 95); // Color for the like button\r\n    private CardLayout cardLayout;\r\n    private JPanel cardPanel;\r\n    private JPanel homePanel;\r\n    private JPanel imageViewPanel;\r\n\r\n    public QuakstagramHomeUI() {\r\n        setTitle(\"Quakstagram Home\");\r\n        setSize(WIDTH, HEIGHT);\r\n        setMinimumSize(new Dimension(WIDTH, HEIGHT));\r\n        setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n        setLayout(new BorderLayout());\r\n        cardLayout = new CardLayout();\r\n        cardPanel = new JPanel(cardLayout);\r\n\r\n        homePanel = new JPanel(new BorderLayout());\r\n        imageViewPanel = new JPanel(new BorderLayout());\r\n\r\n        initializeUI();\r\n\r\n        cardPanel.add(homePanel, \"Home\");\r\n        cardPanel.add(imageViewPanel, \"ImageView\");\r\n\r\n        add(cardPanel, BorderLayout.CENTER);\r\n        cardLayout.show(cardPanel, \"Home\"); // Start with the home view\r\n\r\n        // Header Panel (reuse from InstagramProfileUI or customize for home page)\r\n        // Header with the Register label\r\n        JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        headerPanel.setBackground(new Color(51, 51, 51)); // Set a darker background for the header\r\n        JLabel lblRegister = new JLabel(\"\uD83D\uDC25 Quackstagram \uD83D\uDC25\");\r\n        lblRegister.setFont(new Font(\"Arial\", Font.BOLD, 16));\r\n        lblRegister.setForeground(Color.WHITE); // Set the text color to white\r\n        headerPanel.add(lblRegister);\r\n        headerPanel.setPreferredSize(new Dimension(WIDTH, 40)); // Give the header a fixed height\r\n\r\n        add(headerPanel, BorderLayout.NORTH);\r\n\r\n        // Navigation Bar\r\n        JPanel navigationPanel = new JPanel();\r\n        navigationPanel.setBackground(new Color(249, 249, 249));\r\n        navigationPanel.setLayout(new BoxLayout(navigationPanel, BoxLayout.X_AXIS));\r\n        navigationPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n\r\n        navigationPanel.add(createIconButton(\"img/icons/home.png\", \"home\"));\r\n        navigationPanel.add(Box.createHorizontalGlue());\r\n        navigationPanel.add(createIconButton(\"img/icons/search.png\", \"explore\"));\r\n        navigationPanel.add(Box.createHorizontalGlue());\r\n        navigationPanel.add(createIconButton(\"img/icons/add.png\", \"add\"));\r\n        navigationPanel.add(Box.createHorizontalGlue());\r\n        navigationPanel.add(createIconButton(\"img/icons/heart.png\", \"notification\"));\r\n        navigationPanel.add(Box.createHorizontalGlue());\r\n        navigationPanel.add(createIconButton(\"img/icons/profile.png\", \"profile\"));\r\n\r\n        add(navigationPanel, BorderLayout.SOUTH);\r\n    }\r\n\r\n    private void initializeUI() {\r\n\r\n        // Content Scroll Panel\r\n        JPanel contentPanel = new JPanel();\r\n        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS)); // Vertical box layout\r\n        JScrollPane scrollPane = new JScrollPane(contentPanel);\r\n        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER); // Never allow\r\n                                                                                                 // horizontal scrolling\r\n        String[][] sampleData = createSampleData();\r\n        populateContentPanel(contentPanel, sampleData);\r\n        add(scrollPane, BorderLayout.CENTER);\r\n\r\n        // Set up the home panel\r\n\r\n        contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));\r\n\r\n        homePanel.add(scrollPane, BorderLayout.CENTER);\r\n\r\n    }\r\n\r\n    private void populateContentPanel(JPanel panel, String[][] sampleData) {\r\n\r\n        for (String[] postData : sampleData) {\r\n            JPanel itemPanel = new JPanel();\r\n            itemPanel.setLayout(new BoxLayout(itemPanel, BoxLayout.Y_AXIS));\r\n            itemPanel.setBackground(Color.WHITE); // Set the background color for the item panel\r\n            itemPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n            itemPanel.setAlignmentX(CENTER_ALIGNMENT);\r\n            JLabel nameLabel = new JLabel(postData[0]);\r\n            nameLabel.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n\r\n            // Crop the image to the fixed size\r\n            JLabel imageLabel = new JLabel();\r\n            imageLabel.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n            imageLabel.setPreferredSize(new Dimension(IMAGE_WIDTH, IMAGE_HEIGHT));\r\n            imageLabel.setBorder(BorderFactory.createLineBorder(Color.BLACK)); // Add border to image label\r\n            String imageId = new File(postData[3]).getName().split(\"\\\\.\")[0];\r\n            try {\r\n                BufferedImage originalImage = ImageIO.read(new File(postData[3]));\r\n                BufferedImage croppedImage = originalImage.getSubimage(0, 0,\r\n                        Math.min(originalImage.getWidth(), IMAGE_WIDTH),\r\n                        Math.min(originalImage.getHeight(), IMAGE_HEIGHT));\r\n                ImageIcon imageIcon = new ImageIcon(croppedImage);\r\n                imageLabel.setIcon(imageIcon);\r\n            } catch (IOException ex) {\r\n                // Handle exception: Image file not found or reading error\r\n                imageLabel.setText(\"Image not found\");\r\n            }\r\n\r\n            JLabel descriptionLabel = new JLabel(postData[1]);\r\n            descriptionLabel.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n\r\n            JLabel likesLabel = new JLabel(postData[2]);\r\n            likesLabel.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n\r\n            JButton likeButton = new JButton(\"‚ù§\");\r\n            likeButton.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n            likeButton.setBackground(LIKE_BUTTON_COLOR); // Set the background color for the like button\r\n            likeButton.setOpaque(true);\r\n            likeButton.setBorderPainted(false); // Remove border\r\n            likeButton.addActionListener(new ActionListener() {\r\n                @Override\r\n                public void actionPerformed(ActionEvent e) {\r\n                    handleLikeAction(imageId, likesLabel);\r\n                }\r\n            });\r\n\r\n            itemPanel.add(nameLabel);\r\n            itemPanel.add(imageLabel);\r\n            itemPanel.add(descriptionLabel);\r\n            itemPanel.add(likesLabel);\r\n            itemPanel.add(likeButton);\r\n\r\n            panel.add(itemPanel);\r\n\r\n            // Make the image clickable\r\n            imageLabel.addMouseListener(new MouseAdapter() {\r\n                @Override\r\n                public void mouseClicked(MouseEvent e) {\r\n                    displayImage(postData); // Call a method to switch to the image view\r\n                }\r\n            });\r\n\r\n            // Grey spacing panel\r\n            JPanel spacingPanel = new JPanel();\r\n            spacingPanel.setPreferredSize(new Dimension(WIDTH - 10, 5)); // Set the height for spacing\r\n            spacingPanel.setBackground(new Color(230, 230, 230)); // Grey color for spacing\r\n            panel.add(spacingPanel);\r\n        }\r\n    }\r\n\r\n    private void handleLikeAction(String imageId, JLabel likesLabel) {\r\n        Path detailsPath = Paths.get(\"img\", \"image_details.txt\");\r\n        Path likesTrackingPath = Paths.get(\"data\", \"likes_tracking.txt\");\r\n        StringBuilder newContent = new StringBuilder();\r\n        boolean updated = false;\r\n        boolean alreadyLiked = false;\r\n        String currentUser = RefactoredSignIn.getLoggedInUsername();\r\n        String imageOwner = \"\";\r\n        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\r\n        // Ensure likes_tracking.txt exists\r\n        try {\r\n            if (!Files.exists(likesTrackingPath)) {\r\n                Files.createFile(likesTrackingPath);\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        // Retrieve the current user from users.txt\r\n        try (BufferedReader userReader = Files.newBufferedReader(Paths.get(\"data\", \"users.txt\"))) {\r\n            String line = userReader.readLine();\r\n            if (line != null) {\r\n                currentUser = line.split(\":\")[0].trim();\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        // Check if the user has already liked this post\r\n        try (BufferedReader likesReader = Files.newBufferedReader(likesTrackingPath)) {\r\n            String line;\r\n            while ((line = likesReader.readLine()) != null) {\r\n                if (line.equals(currentUser + \";\" + imageId)) {\r\n                    alreadyLiked = true;\r\n                    break;\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        if (alreadyLiked) {\r\n            JOptionPane.showMessageDialog(null, \"You have already liked this post!\", \"Like Failed\", JOptionPane.ERROR_MESSAGE);\r\n            return;\r\n        }\r\n\r\n\r\n        // Read and update image_details.txt\r\n        try (BufferedReader reader = Files.newBufferedReader(detailsPath)) {\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                if (line.contains(\"ImageID: \" + imageId)) {\r\n                    String[] parts = line.split(\", \");\r\n                    imageOwner = parts[1].split(\": \")[1];\r\n                    int likes = Integer.parseInt(parts[4].split(\": \")[1]);\r\n                    likes++; // Increment the likes count\r\n                    parts[4] = \"Likes: \" + likes;\r\n                    line = String.join(\", \", parts);\r\n\r\n                    // Update the UI\r\n                    likesLabel.setText(\"Likes: \" + likes);\r\n                    updated = true;\r\n                }\r\n                newContent.append(line).append(\"\\n\");\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        // Write updated likes back to image_details.txt\r\n        if (updated) {\r\n            try (BufferedWriter writer = Files.newBufferedWriter(detailsPath)) {\r\n                writer.write(newContent.toString());\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n\r\n            // Record the like in notifications.txt\r\n            String notification = String.format(\"%s; %s; %s; %s\\n\", imageOwner, currentUser, imageId, timestamp);\r\n            try (BufferedWriter notificationWriter = Files.newBufferedWriter(Paths.get(\"data\", \"notifications.txt\"), StandardOpenOption.CREATE, StandardOpenOption.APPEND)) {\r\n                notificationWriter.write(notification);\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n            // Record the like in likes_tracking.txt to prevent duplicate likes\r\n            try (BufferedWriter likesWriter = Files.newBufferedWriter(likesTrackingPath, StandardOpenOption.APPEND)) {\r\n                likesWriter.write(currentUser + \";\" + imageId);\r\n                likesWriter.newLine();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    private String[][] createSampleData() {\r\n        String currentUser = RefactoredSignIn.getLoggedInUsername();\r\n        try (BufferedReader reader = Files.newBufferedReader(Paths.get(\"data\", \"users.txt\"))) {\r\n            String line;\r\n\r\n            while ((line = reader.readLine()) != null) {  // Iterate through each line\r\n                String[] parts = line.split(\":\");\r\n\r\n                if (parts.length > 0 && parts[0].trim().equalsIgnoreCase(currentUser)) {\r\n                    currentUser = parts[0].trim();\r\n                    break; // Stop searching once found\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        String followedUsers = \"\";\r\n        try (BufferedReader reader = Files.newBufferedReader(Paths.get(\"data\", \"following.txt\"))) {\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                if (line.startsWith(currentUser + \":\")) {\r\n                    followedUsers = line.split(\":\")[1].trim();\r\n                    break;\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n        if (followedUsers.isEmpty()) {\r\n            return new String[0][];\r\n        }\r\n\r\n        // Temporary structure to hold the data\r\n        String[][] tempData = new String[100][]; // Assuming a maximum of 100 posts for simplicity\r\n        int count = 0;\r\n\r\n        try (BufferedReader reader = Files.newBufferedReader(Paths.get(\"img\", \"image_details.txt\"))) {\r\n            String line;\r\n            while ((line = reader.readLine()) != null && count < tempData.length) {\r\n                String[] details = line.split(\", \");\r\n                String imagePoster =\"\";\r\n                if (details.length > 1 && details[1].contains(\": \")) {\r\n                    String[] posterSplit = details[1].split(\": \");\r\n                    if (posterSplit.length > 1) {\r\n                        imagePoster = posterSplit[1]; // Safe to access\r\n                    }\r\n                }\r\n                if (followedUsers.contains(imagePoster)) {\r\n                    String imagePath = \"\"; // Assuming PNG format\r\n                    if (details.length > 0 && details[0].contains(\": \")) {\r\n                        String[] imageSplit = details[0].split(\": \");\r\n                        imagePath = (imageSplit.length > 1) ? \"img/uploaded/\" + imageSplit[1] + \".png\" : \"img/default.png\";\r\n                    }\r\n\r\n                    String description = \"\";\r\n                    if (details.length > 2 && details[2].contains(\": \")) {\r\n                        String[] descSplit = details[2].split(\": \");\r\n                        description = (descSplit.length > 1) ? descSplit[1] : \"No description\";\r\n                    }\r\n\r\n                    String likes = \"\";\r\n                    if (details.length > 4 && details[4].contains(\": \")) {\r\n                        String[] likesSplit = details[4].split(\": \");\r\n                        likes = (likesSplit.length > 1) ? \"Likes: \" + likesSplit[1] : \"Likes: 0\";\r\n                    }\r\n\r\n                    tempData[count++] = new String[]{imagePoster, description, likes, imagePath};\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        // Transfer the data to the final array\r\n        String[][] sampleData = new String[count][];\r\n        System.arraycopy(tempData, 0, sampleData, 0, count);\r\n\r\n        return sampleData;\r\n    }\r\n\r\n\r\n    // private JButton createIconButton(String iconPath) {\r\n    // ImageIcon iconOriginal = new ImageIcon(iconPath);\r\n    // Image iconScaled = iconOriginal.getImage().getScaledInstance(NAV_ICON_SIZE,\r\n    // NAV_ICON_SIZE, Image.SCALE_SMOOTH);\r\n    // JButton button = new JButton(new ImageIcon(iconScaled));\r\n    // button.setBorder(BorderFactory.createEmptyBorder());\r\n    // button.setContentAreaFilled(false);\r\n    // return button;\r\n    // }\r\n\r\n    private void displayImage(String[] postData) {\r\n        imageViewPanel.removeAll(); // Clear previous content\r\n\r\n        String imageId = new File(postData[3]).getName().split(\"\\\\.\")[0];\r\n        JLabel likesLabel = new JLabel(postData[2]); // Update this line\r\n\r\n        // Display the image\r\n        JLabel fullSizeImageLabel = new JLabel();\r\n        fullSizeImageLabel.setHorizontalAlignment(JLabel.CENTER);\r\n\r\n        try {\r\n            BufferedImage originalImage = ImageIO.read(new File(postData[3]));\r\n            BufferedImage croppedImage = originalImage.getSubimage(0, 0, Math.min(originalImage.getWidth(), WIDTH - 20),\r\n                    Math.min(originalImage.getHeight(), HEIGHT - 40));\r\n            ImageIcon imageIcon = new ImageIcon(croppedImage);\r\n            fullSizeImageLabel.setIcon(imageIcon);\r\n        } catch (IOException ex) {\r\n            // Handle exception: Image file not found or reading error\r\n            fullSizeImageLabel.setText(\"Image not found\");\r\n        }\r\n\r\n        // User Info\r\n        JPanel userPanel = new JPanel();\r\n        userPanel.setLayout(new BoxLayout(userPanel, BoxLayout.Y_AXIS));\r\n        JLabel userName = new JLabel(postData[0]);\r\n        userName.setFont(new Font(\"Arial\", Font.BOLD, 18));\r\n        userPanel.add(userName);// User Name\r\n\r\n        JButton likeButton = new JButton(\"‚ù§\");\r\n        likeButton.setAlignmentX(Component.LEFT_ALIGNMENT);\r\n        likeButton.setBackground(LIKE_BUTTON_COLOR); // Set the background color for the like button\r\n        likeButton.setOpaque(true);\r\n        likeButton.setBorderPainted(false); // Remove border\r\n        likeButton.addActionListener(new ActionListener() {\r\n            @Override\r\n            public void actionPerformed(ActionEvent e) {\r\n                handleLikeAction(imageId, likesLabel); // Update this line\r\n                refreshDisplayImage(postData, imageId); // Refresh the view\r\n            }\r\n        });\r\n\r\n        // Information panel at the bottom\r\n        JPanel infoPanel = new JPanel();\r\n        infoPanel.setLayout(new BoxLayout(infoPanel, BoxLayout.Y_AXIS));\r\n        infoPanel.add(new JLabel(postData[1])); // Description\r\n        infoPanel.add(new JLabel(postData[2])); // Likes\r\n        infoPanel.add(likeButton);\r\n\r\n        imageViewPanel.add(fullSizeImageLabel, BorderLayout.CENTER);\r\n        imageViewPanel.add(infoPanel, BorderLayout.SOUTH);\r\n        imageViewPanel.add(userPanel, BorderLayout.NORTH);\r\n\r\n        imageViewPanel.revalidate();\r\n        imageViewPanel.repaint();\r\n\r\n        cardLayout.show(cardPanel, \"ImageView\"); // Switch to the image view\r\n    }\r\n\r\n    private void refreshDisplayImage(String[] postData, String imageId) {\r\n        // Read updated likes count from image_details.txt\r\n        try (BufferedReader reader = Files.newBufferedReader(Paths.get(\"img\", \"image_details.txt\"))) {\r\n            String line;\r\n            while ((line = reader.readLine()) != null) {\r\n                if (line.contains(\"ImageID: \" + imageId)) {\r\n                    String likes = line.split(\", \")[4].split(\": \")[1];\r\n                    postData[2] = \"Likes: \" + likes;\r\n                    break;\r\n                }\r\n            }\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n        // Call displayImage with updated postData\r\n        displayImage(postData);\r\n    }\r\n\r\n    private JButton createIconButton(String iconPath, String buttonType) {\r\n        return super.BaseCreateIconButton(iconPath, buttonType);\r\n    }\r\n\r\n    // private void openProfileUI() {\r\n    // super.BaseOpenProfileUI();\r\n    // }\r\n\r\n    // private void notificationsUI() {\r\n    // super.BaseNotificationsUI();\r\n    // }\r\n\r\n    // private void ImageUploadUI() {\r\n    // super.BaseImageUploadUI();\r\n    // }\r\n\r\n    // private void openHomeUI() {\r\n    // super.BaseOpenHomeUI();\r\n    // }\r\n\r\n    // private void exploreUI() {\r\n    // super.BaseExploreUI();\r\n    // }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Refactor_UI/QuakstagramHomeUI.java b/Refactor_UI/QuakstagramHomeUI.java
--- a/Refactor_UI/QuakstagramHomeUI.java	(revision c08b8fa8cb8a96e0659c6903d223425260884f2d)
+++ b/Refactor_UI/QuakstagramHomeUI.java	(date 1740664832706)
@@ -7,6 +7,8 @@
 import java.awt.*;
 import java.awt.event.ActionEvent;
 import java.awt.event.ActionListener;
+import java.awt.event.KeyAdapter;
+import java.awt.event.KeyEvent;
 import java.awt.image.BufferedImage;
 import java.io.BufferedReader;
 import java.io.BufferedWriter;
@@ -55,16 +57,38 @@
 
         // Header Panel (reuse from InstagramProfileUI or customize for home page)
         // Header with the Register label
-        JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
-        headerPanel.setBackground(new Color(51, 51, 51)); // Set a darker background for the header
-        JLabel lblRegister = new JLabel("üê• Quackstagram üê•");
-        lblRegister.setFont(new Font("Arial", Font.BOLD, 16));
-        lblRegister.setForeground(Color.WHITE); // Set the text color to white
-        headerPanel.add(lblRegister);
-        headerPanel.setPreferredSize(new Dimension(WIDTH, 40)); // Give the header a fixed height
+        JPanel headerPanel = new JPanel(new BorderLayout());
+          headerPanel.setBackground(new Color(51, 51, 51)); // Set a darker background for the header
+          headerPanel.setPreferredSize(new Dimension(WIDTH, 40)); // Give the header a fixed height
+          
+          //Register Panel
+          JLabel lblRegister = new JLabel("üê• Quackstagram üê•");
+          lblRegister.setFont(new Font("Arial", Font.BOLD, 16));
+          lblRegister.setForeground(Color.WHITE); // Set the text color to white
+          lblRegister.setHorizontalAlignment(SwingConstants.CENTER);
+
+          headerPanel.add(lblRegister, BorderLayout.CENTER);
+        
+          // Message Icon Button 
+         ImageIcon msgIcon = new ImageIcon("img/icons/msgIcon.png");
+         Image msgIconScale = msgIcon.getImage().getScaledInstance(35,35, Image.SCALE_SMOOTH);
+         JButton msgIconButton = new JButton(new ImageIcon(msgIconScale));
+         msgIconButton.setBorder(BorderFactory.createEmptyBorder());
+         msgIconButton.setContentAreaFilled(false);
+         msgIconButton.setBorderPainted(false); // Remove border
+         msgIconButton.setPreferredSize(new Dimension(30, 30)); // Set preferred size
+
+         // Create a panel to hold the button with padding
+         JPanel msgIconPanel = new JPanel(new FlowLayout(FlowLayout.RIGHT, 10, 0)); 
+         msgIconPanel.setBackground(new Color(51, 51, 51)); // same background as header 
+         msgIconPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 10)); // Add padding around the button
+         msgIconPanel.add(msgIconButton);
+         msgIconButton.addActionListener(e -> cardLayout.show(cardPanel, "Messages"));
+
+         // Add the message icon button to the header panel
+         headerPanel.add(msgIconPanel, BorderLayout.EAST); // Add to the right side of the header
 
-        add(headerPanel, BorderLayout.NORTH);
-
+         add(headerPanel, BorderLayout.NORTH);
         // Navigation Bar
         JPanel navigationPanel = new JPanel();
         navigationPanel.setBackground(new Color(249, 249, 249));
@@ -90,16 +114,14 @@
         JPanel contentPanel = new JPanel();
         contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS)); // Vertical box layout
         JScrollPane scrollPane = new JScrollPane(contentPanel);
-        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER); // Never allow
-                                                                                                 // horizontal scrolling
+        scrollPane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER); // Never allow// horizontal scrolling
+
         String[][] sampleData = createSampleData();
         populateContentPanel(contentPanel, sampleData);
         add(scrollPane, BorderLayout.CENTER);
 
         // Set up the home panel
-
         contentPanel.setLayout(new BoxLayout(contentPanel, BoxLayout.Y_AXIS));
-
         homePanel.add(scrollPane, BorderLayout.CENTER);
 
     }
@@ -151,11 +173,44 @@
                 }
             });
 
+             // Button for the comment  
+            ImageIcon commentIcon = new ImageIcon("img/icons/CommentIcon.png");
+            Image iconScaled = commentIcon.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH);
+            JButton commentIconButton = new JButton(new ImageIcon(iconScaled));
+            commentIconButton.setBorder(BorderFactory.createEmptyBorder());
+            commentIconButton.setContentAreaFilled(false);
+            commentIconButton.setBorderPainted(false); // Remove border
+            
+            // Create another Panel to innclude the comment icon on the left
+            JPanel commentPanelIcon = new JPanel(new FlowLayout(FlowLayout.LEFT));
+            commentPanelIcon.setBackground(Color.WHITE); // Set the background color for the comment panel
+            commentPanelIcon.setPreferredSize(new Dimension(WIDTH, 30));
+            commentPanelIcon.setMaximumSize(new Dimension(WIDTH, 30));
+            commentPanelIcon.add(commentIconButton);
+
+            // Comment Panel where its initially hidden until pressed
+            JPanel commentPanel = createCommentPanel(imageId);
+            commentPanel.setVisible(false); // hide the panel at first 
+
+            // Action listener for the comment button 
+            commentIconButton.addActionListener(new ActionListener() {
+                @Override
+                public void actionPerformed(ActionEvent e) {
+                    commentPanel.setVisible(!commentPanel.isVisible()); // show the panel
+                    itemPanel.revalidate(); 
+                    itemPanel.repaint();
+                }
+            });
+
+            // add the item to the item panel 
             itemPanel.add(nameLabel);
             itemPanel.add(imageLabel);
             itemPanel.add(descriptionLabel);
             itemPanel.add(likesLabel);
             itemPanel.add(likeButton);
+            itemPanel.add(Box.createVerticalGlue());
+            itemPanel.add(commentPanelIcon);
+            itemPanel.add(commentPanel);
 
             panel.add(itemPanel);
 
@@ -348,17 +403,6 @@
         return sampleData;
     }
 
-
-    // private JButton createIconButton(String iconPath) {
-    // ImageIcon iconOriginal = new ImageIcon(iconPath);
-    // Image iconScaled = iconOriginal.getImage().getScaledInstance(NAV_ICON_SIZE,
-    // NAV_ICON_SIZE, Image.SCALE_SMOOTH);
-    // JButton button = new JButton(new ImageIcon(iconScaled));
-    // button.setBorder(BorderFactory.createEmptyBorder());
-    // button.setContentAreaFilled(false);
-    // return button;
-    // }
-
     private void displayImage(String[] postData) {
         imageViewPanel.removeAll(); // Clear previous content
 
@@ -399,6 +443,29 @@
                 refreshDisplayImage(postData, imageId); // Refresh the view
             }
         });
+        // Button for the comment text  
+        ImageIcon commentIcon = new ImageIcon("img/icons/CommentIcon .png");
+        Image iconScaled = commentIcon.getImage().getScaledInstance(20, 20, Image.SCALE_SMOOTH);
+        JButton commentIconButton = new JButton(new ImageIcon(iconScaled));
+        commentIconButton.setBorder(BorderFactory.createEmptyBorder());
+        commentIconButton.setContentAreaFilled(false);
+        commentIconButton.setBorderPainted(false); // Remove border
+        commentIconButton.addActionListener(new ActionListener() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+                // Create and display the comment panel
+                JPanel commentPanel = createCommentPanel(imageId);
+        
+                // Create a dialog to display the comment panel
+                JDialog commentDialog = new JDialog();
+                commentDialog.setTitle("Comments");
+                commentDialog.setModal(true);
+                commentDialog.setSize(300, 400);
+                commentDialog.setLocationRelativeTo(null); // Center the dialog
+                commentDialog.add(commentPanel);
+                commentDialog.setVisible(true);
+            }
+        });
 
         // Information panel at the bottom
         JPanel infoPanel = new JPanel();
@@ -459,5 +526,103 @@
     // private void exploreUI() {
     // super.BaseExploreUI();
     // }
-
+    private JPanel createCommentPanel(String imageId) {
+        JPanel commentPanel = new JPanel();
+        commentPanel.setLayout(new BorderLayout());
+        commentPanel.setBackground(Color.WHITE);
+        commentPanel.setBorder(BorderFactory.createLineBorder(Color.GRAY)); //  a border for better visualization 
+    
+        // Text area to display comments
+        JTextArea commentsArea = new JTextArea();
+        commentsArea.setEditable(false); // User will not be able to change the comments 
+        commentsArea.setBackground(new Color(240, 240, 240)); // Light gray background
+        commentsArea.setLineWrap(true); // this will enable the text area panel to be the same as the comment panel 
+        commentsArea.setWrapStyleWord(true); 
+
+        // The scroll bar for the comment 
+        JScrollPane scrollPane = new JScrollPane(commentsArea);
+        scrollPane.setBorder(BorderFactory.createEmptyBorder()); // Remove the border of the scroll pane
+        commentPanel.add(scrollPane, BorderLayout.CENTER);
+
+        // Panel to add new comments
+        JPanel newCommentPanel = new JPanel(new BorderLayout());
+        JTextField commentField = new JTextField();
+        JButton submitButton = new JButton("‚û°Ô∏é");
+    
+        // Load existing comments
+        loadComments(imageId, commentsArea);
+    
+        // Add action listener to the submit button
+        ActionListener submitAction = new ActionListener() {
+            @Override
+            public void actionPerformed(ActionEvent e) {
+                String comment = commentField.getText().trim();
+                if (!comment.isEmpty()) {
+                    saveComment(imageId, comment);
+                    commentsArea.append(getCurrentUser() + comment + "\n");
+                    commentField.setText("");
+                }
+            }
+        };
+        submitButton.addActionListener(submitAction);
+        
+        // Add the fact that wehn you press enter it also sends the comment 
+        commentField.addKeyListener(new KeyAdapter() {
+        @Override
+        public void keyPressed(KeyEvent e) {
+            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
+                submitAction.actionPerformed(null); // makes the same action as submit 
+              }
+          }
+     });
+    
+        newCommentPanel.add(commentField, BorderLayout.CENTER);
+        newCommentPanel.add(submitButton, BorderLayout.EAST);
+        commentPanel.add(newCommentPanel, BorderLayout.SOUTH);
+
+        return commentPanel;
+    }
+
+    // methode to save the comment in local repo
+    private void saveComment(String imageId, String comment) {
+        String currentUser = getCurrentUser();
+        String commentEntry = imageId + ": " + currentUser + comment + "\n";
+        try (BufferedWriter writer = Files.newBufferedWriter(Paths.get("data", "comments.txt"), StandardOpenOption.CREATE, StandardOpenOption.APPEND)) {
+            writer.write(commentEntry);
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+    }
+
+    // Methode to load the comment in comment section 
+    private void loadComments(String imageId, JTextArea commentsArea) {
+        try (BufferedReader reader = Files.newBufferedReader(Paths.get("data", "comments.txt"))) {
+            String line;
+            while ((line = reader.readLine()) != null) {
+                if (line.startsWith(imageId + ": ")) {
+                    String[] parts = line.split(": ", 3); 
+                    if (parts.length == 3) {
+                        String username = parts[1];
+                        String comment = parts[2];
+                        commentsArea.append(username + ": " + comment + "\n"); // Displays the username and comment
+                    }
+            }
+        }
+     } catch (IOException e) {
+        }
+    }
+
+    // Method to get the name of user 
+    private String getCurrentUser() {
+        String currentUser = "";
+        try (BufferedReader reader = Files.newBufferedReader(Paths.get("data", "users.txt"))) {
+            String line = reader.readLine();
+            if (line != null) {
+                currentUser = line.split(":")[0].trim(); 
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return currentUser + " say's: ";
+    }
 }
Index: data/users.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Lorin:For copyright reasons, I am not Grogu:Password\r\nLouis:Bio:rclla\r\nabdul:zzzzz:abdul1\r\ntest1:nooo:test1\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/data/users.txt b/data/users.txt
--- a/data/users.txt	(revision c08b8fa8cb8a96e0659c6903d223425260884f2d)
+++ b/data/users.txt	(date 1740664832706)
@@ -2,3 +2,4 @@
 Louis:Bio:rclla
 abdul:zzzzz:abdul1
 test1:nooo:test1
+A:Bio:Password
Index: Refactor_UI/BaseUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Refactor_UI;\r\n\r\nimport User.*;\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.nio.file.Files;\r\nimport java.nio.file.Paths;\r\nimport New_Refactor_Sign_In.*;\r\nimport User.*;\r\n\r\n\r\npublic class BaseUI extends JFrame {\r\n    private static final int NAV_ICON_SIZE = 20;\r\n\r\n    public JPanel BaseCreateHeaderPanel() {\r\n\r\n        // Header Panel (reuse from InstagramProfileUI or customize for home page)\r\n        // Header with the Register label\r\n        JPanel headerPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));\r\n        headerPanel.setBackground(new Color(51, 51, 51)); // Set a darker background for the header\r\n        JLabel lblRegister = new JLabel(\" Explore \uD83D\uDC25\");\r\n        lblRegister.setFont(new Font(\"Arial\", Font.BOLD, 16));\r\n        lblRegister.setForeground(Color.WHITE); // Set the text color to white\r\n        headerPanel.add(lblRegister);\r\n        headerPanel.setPreferredSize(new Dimension(WIDTH, 40)); // Give the header a fixed height\r\n        return headerPanel;\r\n    }\r\n\r\n    public JPanel BaseCreateNavigationPanel() {\r\n        // Create and return the navigation panel\r\n        // Navigation Bar\r\n        JPanel navigationPanel = new JPanel();\r\n        navigationPanel.setBackground(new Color(249, 249, 249));\r\n        navigationPanel.setLayout(new BoxLayout(navigationPanel, BoxLayout.X_AXIS));\r\n        navigationPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));\r\n\r\n        navigationPanel.add(BaseCreateIconButton(\"img/icons/home.png\", \"home\"));\r\n        navigationPanel.add(Box.createHorizontalGlue());\r\n        navigationPanel.add(BaseCreateIconButton(\"img/icons/search.png\", \"explore\"));\r\n        navigationPanel.add(Box.createHorizontalGlue());\r\n        navigationPanel.add(BaseCreateIconButton(\"img/icons/add.png\", \"add\"));\r\n        navigationPanel.add(Box.createHorizontalGlue());\r\n        navigationPanel.add(BaseCreateIconButton(\"img/icons/heart.png\", \"notification\"));\r\n        navigationPanel.add(Box.createHorizontalGlue());\r\n        navigationPanel.add(BaseCreateIconButton(\"img/icons/profile.png\", \"profile\"));\r\n\r\n        return navigationPanel;\r\n    }\r\n\r\n    @SuppressWarnings(\"unused\")\r\n    public JButton BaseCreateIconButton(String iconPath, String buttonType) {\r\n        ImageIcon iconOriginal = new ImageIcon(iconPath);\r\n        Image iconScaled = iconOriginal.getImage().getScaledInstance(NAV_ICON_SIZE, NAV_ICON_SIZE, Image.SCALE_SMOOTH);\r\n        JButton button = new JButton(new ImageIcon(iconScaled));\r\n        button.setBorder(BorderFactory.createEmptyBorder());\r\n        button.setContentAreaFilled(false);\r\n\r\n        // Define actions based on button type\r\n        if (\"home\".equals(buttonType)) {\r\n            button.addActionListener(_ -> BaseOpenHomeUI());\r\n        } else if (\"profile\".equals(buttonType)) {\r\n            button.addActionListener(e -> BaseOpenProfileUI());\r\n        } else if (\"notification\".equals(buttonType)) {\r\n            button.addActionListener(e -> BaseNotificationsUI());\r\n        } else if (\"explore\".equals(buttonType)) {\r\n            button.addActionListener(e -> BaseExploreUI());\r\n        } else if (\"add\".equals(buttonType)) {\r\n            button.addActionListener(e -> BaseImageUploadUI());\r\n        }\r\n        return button;\r\n\r\n    }\r\n\r\n    public void BaseImageUploadUI() {\r\n        // Open InstagramProfileUI frame\r\n        this.dispose();\r\n        ImageUploadUI upload = new ImageUploadUI();\r\n        upload.setVisible(true);\r\n    }\r\n\r\n    public void BaseOpenProfileUI() {\r\n        this.dispose();\r\n\r\n        // Access the logged-in username correctly\r\n        String loggedInUsername = RefactoredSignIn.getLoggedInUsername(); // ‚úÖ Fix: Use the getter method\r\n\r\n        if (loggedInUsername == null || loggedInUsername.isEmpty()) {\r\n            System.out.println(\"Error: No user is logged in!\");\r\n            return;\r\n        }\r\n\r\n        // Open profile with the correct user\r\n        User user = new User(loggedInUsername);\r\n        InstagramProfileUI profileUI = new InstagramProfileUI(user);\r\n        profileUI.setVisible(true);\r\n    }\r\n\r\n\r\n    public void BaseNotificationsUI() {\r\n        // Open InstagramProfileUI frame\r\n        this.dispose();\r\n        NotificationsUI notificationsUI = new NotificationsUI();\r\n        notificationsUI.setVisible(true);\r\n    }\r\n\r\n    public void BaseOpenHomeUI() {\r\n        // Open InstagramProfileUI frame\r\n        this.dispose();\r\n        QuakstagramHomeUI homeUI = new QuakstagramHomeUI();\r\n        homeUI.setVisible(true);\r\n    }\r\n\r\n    public void BaseExploreUI() {\r\n        // Open InstagramProfileUI frame\r\n        this.dispose();\r\n        ExploreUI explore = new ExploreUI();\r\n        explore.setVisible(true);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Refactor_UI/BaseUI.java b/Refactor_UI/BaseUI.java
--- a/Refactor_UI/BaseUI.java	(revision c08b8fa8cb8a96e0659c6903d223425260884f2d)
+++ b/Refactor_UI/BaseUI.java	(date 1740664832706)
@@ -59,7 +59,7 @@
 
         // Define actions based on button type
         if ("home".equals(buttonType)) {
-            button.addActionListener(_ -> BaseOpenHomeUI());
+            button.addActionListener(e -> BaseOpenHomeUI());
         } else if ("profile".equals(buttonType)) {
             button.addActionListener(e -> BaseOpenProfileUI());
         } else if ("notification".equals(buttonType)) {
